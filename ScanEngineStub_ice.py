# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `ScanEngineStub.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice_Identity_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module ScanEngineStub
_M_ScanEngineStub = Ice.openModule('ScanEngineStub')
__name__ = 'ScanEngineStub'

if 'ClientHowType' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.ClientHowType = Ice.createTempClass()
    class ClientHowType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ClientHowType.Howunknown = ClientHowType("Howunknown", 0)
    ClientHowType.Howendpolit = ClientHowType("Howendpolit", 1)
    ClientHowType.Howdatadiscovery = ClientHowType("Howdatadiscovery", 2)
    ClientHowType.Hownetworkmonitor = ClientHowType("Hownetworkmonitor", 3)
    ClientHowType.Howmailguard = ClientHowType("Howmailguard", 4)
    ClientHowType.Howgateway = ClientHowType("Howgateway", 5)
    ClientHowType.Howwebadp = ClientHowType("Howwebadp", 6)
    ClientHowType._enumerators = { 0:ClientHowType.Howunknown, 1:ClientHowType.Howendpolit, 2:ClientHowType.Howdatadiscovery, 3:ClientHowType.Hownetworkmonitor, 4:ClientHowType.Howmailguard, 5:ClientHowType.Howgateway, 6:ClientHowType.Howwebadp }

    _M_ScanEngineStub._t_ClientHowType = IcePy.defineEnum('::ScanEngineStub::ClientHowType', ClientHowType, (), ClientHowType._enumerators)

    _M_ScanEngineStub.ClientHowType = ClientHowType
    del ClientHowType

if 'ExceptAction' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.ExceptAction = Ice.createTempClass()
    class ExceptAction(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ExceptAction.Erescan = ExceptAction("Erescan", 0)
    ExceptAction.Eerrscan = ExceptAction("Eerrscan", 1)
    ExceptAction._enumerators = { 0:ExceptAction.Erescan, 1:ExceptAction.Eerrscan }

    _M_ScanEngineStub._t_ExceptAction = IcePy.defineEnum('::ScanEngineStub::ExceptAction', ExceptAction, (), ExceptAction._enumerators)

    _M_ScanEngineStub.ExceptAction = ExceptAction
    del ExceptAction

if 'eLicActiveObjectType' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.eLicActiveObjectType = Ice.createTempClass()
    class eLicActiveObjectType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    eLicActiveObjectType.AlgorithmType = eLicActiveObjectType("AlgorithmType", 0)
    eLicActiveObjectType.FileType = eLicActiveObjectType("FileType", 1)
    eLicActiveObjectType._enumerators = { 0:eLicActiveObjectType.AlgorithmType, 1:eLicActiveObjectType.FileType }

    _M_ScanEngineStub._t_eLicActiveObjectType = IcePy.defineEnum('::ScanEngineStub::eLicActiveObjectType', eLicActiveObjectType, (), eLicActiveObjectType._enumerators)

    _M_ScanEngineStub.eLicActiveObjectType = eLicActiveObjectType
    del eLicActiveObjectType

if 'ExceptOfTask' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.ExceptOfTask = Ice.createTempClass()
    class ExceptOfTask(object):
        def __init__(self, eAction=_M_ScanEngineStub.ExceptAction.Erescan, strTaskID='', strMD5='', strOrigFile=''):
            self.eAction = eAction
            self.strTaskID = strTaskID
            self.strMD5 = strMD5
            self.strOrigFile = strOrigFile

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.eAction)
            _h = 5 * _h + Ice.getHash(self.strTaskID)
            _h = 5 * _h + Ice.getHash(self.strMD5)
            _h = 5 * _h + Ice.getHash(self.strOrigFile)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ScanEngineStub.ExceptOfTask):
                return NotImplemented
            else:
                if self.eAction is None or other.eAction is None:
                    if self.eAction != other.eAction:
                        return (-1 if self.eAction is None else 1)
                else:
                    if self.eAction < other.eAction:
                        return -1
                    elif self.eAction > other.eAction:
                        return 1
                if self.strTaskID is None or other.strTaskID is None:
                    if self.strTaskID != other.strTaskID:
                        return (-1 if self.strTaskID is None else 1)
                else:
                    if self.strTaskID < other.strTaskID:
                        return -1
                    elif self.strTaskID > other.strTaskID:
                        return 1
                if self.strMD5 is None or other.strMD5 is None:
                    if self.strMD5 != other.strMD5:
                        return (-1 if self.strMD5 is None else 1)
                else:
                    if self.strMD5 < other.strMD5:
                        return -1
                    elif self.strMD5 > other.strMD5:
                        return 1
                if self.strOrigFile is None or other.strOrigFile is None:
                    if self.strOrigFile != other.strOrigFile:
                        return (-1 if self.strOrigFile is None else 1)
                else:
                    if self.strOrigFile < other.strOrigFile:
                        return -1
                    elif self.strOrigFile > other.strOrigFile:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ScanEngineStub._t_ExceptOfTask)

        __repr__ = __str__

    _M_ScanEngineStub._t_ExceptOfTask = IcePy.defineStruct('::ScanEngineStub::ExceptOfTask', ExceptOfTask, (), (
        ('eAction', (), _M_ScanEngineStub._t_ExceptAction),
        ('strTaskID', (), IcePy._t_string),
        ('strMD5', (), IcePy._t_string),
        ('strOrigFile', (), IcePy._t_string)
    ))

    _M_ScanEngineStub.ExceptOfTask = ExceptOfTask
    del ExceptOfTask

if 'ResultOfScan' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.ResultOfScan = Ice.createTempClass()
    class ResultOfScan(object):
        def __init__(self, strTaskID='', strMD5='', strOrigFile='', iFileTypeCode=0, strProfileSN='', strProfileName='', eReturnCode=0, bDuplicate=False, iIncidentCount=0):
            self.strTaskID = strTaskID
            self.strMD5 = strMD5
            self.strOrigFile = strOrigFile
            self.iFileTypeCode = iFileTypeCode
            self.strProfileSN = strProfileSN
            self.strProfileName = strProfileName
            self.eReturnCode = eReturnCode
            self.bDuplicate = bDuplicate
            self.iIncidentCount = iIncidentCount

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.strTaskID)
            _h = 5 * _h + Ice.getHash(self.strMD5)
            _h = 5 * _h + Ice.getHash(self.strOrigFile)
            _h = 5 * _h + Ice.getHash(self.iFileTypeCode)
            _h = 5 * _h + Ice.getHash(self.strProfileSN)
            _h = 5 * _h + Ice.getHash(self.strProfileName)
            _h = 5 * _h + Ice.getHash(self.eReturnCode)
            _h = 5 * _h + Ice.getHash(self.bDuplicate)
            _h = 5 * _h + Ice.getHash(self.iIncidentCount)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ScanEngineStub.ResultOfScan):
                return NotImplemented
            else:
                if self.strTaskID is None or other.strTaskID is None:
                    if self.strTaskID != other.strTaskID:
                        return (-1 if self.strTaskID is None else 1)
                else:
                    if self.strTaskID < other.strTaskID:
                        return -1
                    elif self.strTaskID > other.strTaskID:
                        return 1
                if self.strMD5 is None or other.strMD5 is None:
                    if self.strMD5 != other.strMD5:
                        return (-1 if self.strMD5 is None else 1)
                else:
                    if self.strMD5 < other.strMD5:
                        return -1
                    elif self.strMD5 > other.strMD5:
                        return 1
                if self.strOrigFile is None or other.strOrigFile is None:
                    if self.strOrigFile != other.strOrigFile:
                        return (-1 if self.strOrigFile is None else 1)
                else:
                    if self.strOrigFile < other.strOrigFile:
                        return -1
                    elif self.strOrigFile > other.strOrigFile:
                        return 1
                if self.iFileTypeCode is None or other.iFileTypeCode is None:
                    if self.iFileTypeCode != other.iFileTypeCode:
                        return (-1 if self.iFileTypeCode is None else 1)
                else:
                    if self.iFileTypeCode < other.iFileTypeCode:
                        return -1
                    elif self.iFileTypeCode > other.iFileTypeCode:
                        return 1
                if self.strProfileSN is None or other.strProfileSN is None:
                    if self.strProfileSN != other.strProfileSN:
                        return (-1 if self.strProfileSN is None else 1)
                else:
                    if self.strProfileSN < other.strProfileSN:
                        return -1
                    elif self.strProfileSN > other.strProfileSN:
                        return 1
                if self.strProfileName is None or other.strProfileName is None:
                    if self.strProfileName != other.strProfileName:
                        return (-1 if self.strProfileName is None else 1)
                else:
                    if self.strProfileName < other.strProfileName:
                        return -1
                    elif self.strProfileName > other.strProfileName:
                        return 1
                if self.eReturnCode is None or other.eReturnCode is None:
                    if self.eReturnCode != other.eReturnCode:
                        return (-1 if self.eReturnCode is None else 1)
                else:
                    if self.eReturnCode < other.eReturnCode:
                        return -1
                    elif self.eReturnCode > other.eReturnCode:
                        return 1
                if self.bDuplicate is None or other.bDuplicate is None:
                    if self.bDuplicate != other.bDuplicate:
                        return (-1 if self.bDuplicate is None else 1)
                else:
                    if self.bDuplicate < other.bDuplicate:
                        return -1
                    elif self.bDuplicate > other.bDuplicate:
                        return 1
                if self.iIncidentCount is None or other.iIncidentCount is None:
                    if self.iIncidentCount != other.iIncidentCount:
                        return (-1 if self.iIncidentCount is None else 1)
                else:
                    if self.iIncidentCount < other.iIncidentCount:
                        return -1
                    elif self.iIncidentCount > other.iIncidentCount:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ScanEngineStub._t_ResultOfScan)

        __repr__ = __str__

    _M_ScanEngineStub._t_ResultOfScan = IcePy.defineStruct('::ScanEngineStub::ResultOfScan', ResultOfScan, (), (
        ('strTaskID', (), IcePy._t_string),
        ('strMD5', (), IcePy._t_string),
        ('strOrigFile', (), IcePy._t_string),
        ('iFileTypeCode', (), IcePy._t_int),
        ('strProfileSN', (), IcePy._t_string),
        ('strProfileName', (), IcePy._t_string),
        ('eReturnCode', (), IcePy._t_int),
        ('bDuplicate', (), IcePy._t_bool),
        ('iIncidentCount', (), IcePy._t_int)
    ))

    _M_ScanEngineStub.ResultOfScan = ResultOfScan
    del ResultOfScan

if 'ResultOfMetaRule' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.ResultOfMetaRule = Ice.createTempClass()
    class ResultOfMetaRule(object):
        def __init__(self, strInnerFile='', strDisplayFileName='', strMatchRuleSN='', strMatchRuleName='', uiMatchCount=0, strMatchContentSN='', strIncidentFilePath='', strIncidentFileType=''):
            self.strInnerFile = strInnerFile
            self.strDisplayFileName = strDisplayFileName
            self.strMatchRuleSN = strMatchRuleSN
            self.strMatchRuleName = strMatchRuleName
            self.uiMatchCount = uiMatchCount
            self.strMatchContentSN = strMatchContentSN
            self.strIncidentFilePath = strIncidentFilePath
            self.strIncidentFileType = strIncidentFileType

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.strInnerFile)
            _h = 5 * _h + Ice.getHash(self.strDisplayFileName)
            _h = 5 * _h + Ice.getHash(self.strMatchRuleSN)
            _h = 5 * _h + Ice.getHash(self.strMatchRuleName)
            _h = 5 * _h + Ice.getHash(self.uiMatchCount)
            _h = 5 * _h + Ice.getHash(self.strMatchContentSN)
            _h = 5 * _h + Ice.getHash(self.strIncidentFilePath)
            _h = 5 * _h + Ice.getHash(self.strIncidentFileType)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ScanEngineStub.ResultOfMetaRule):
                return NotImplemented
            else:
                if self.strInnerFile is None or other.strInnerFile is None:
                    if self.strInnerFile != other.strInnerFile:
                        return (-1 if self.strInnerFile is None else 1)
                else:
                    if self.strInnerFile < other.strInnerFile:
                        return -1
                    elif self.strInnerFile > other.strInnerFile:
                        return 1
                if self.strDisplayFileName is None or other.strDisplayFileName is None:
                    if self.strDisplayFileName != other.strDisplayFileName:
                        return (-1 if self.strDisplayFileName is None else 1)
                else:
                    if self.strDisplayFileName < other.strDisplayFileName:
                        return -1
                    elif self.strDisplayFileName > other.strDisplayFileName:
                        return 1
                if self.strMatchRuleSN is None or other.strMatchRuleSN is None:
                    if self.strMatchRuleSN != other.strMatchRuleSN:
                        return (-1 if self.strMatchRuleSN is None else 1)
                else:
                    if self.strMatchRuleSN < other.strMatchRuleSN:
                        return -1
                    elif self.strMatchRuleSN > other.strMatchRuleSN:
                        return 1
                if self.strMatchRuleName is None or other.strMatchRuleName is None:
                    if self.strMatchRuleName != other.strMatchRuleName:
                        return (-1 if self.strMatchRuleName is None else 1)
                else:
                    if self.strMatchRuleName < other.strMatchRuleName:
                        return -1
                    elif self.strMatchRuleName > other.strMatchRuleName:
                        return 1
                if self.uiMatchCount is None or other.uiMatchCount is None:
                    if self.uiMatchCount != other.uiMatchCount:
                        return (-1 if self.uiMatchCount is None else 1)
                else:
                    if self.uiMatchCount < other.uiMatchCount:
                        return -1
                    elif self.uiMatchCount > other.uiMatchCount:
                        return 1
                if self.strMatchContentSN is None or other.strMatchContentSN is None:
                    if self.strMatchContentSN != other.strMatchContentSN:
                        return (-1 if self.strMatchContentSN is None else 1)
                else:
                    if self.strMatchContentSN < other.strMatchContentSN:
                        return -1
                    elif self.strMatchContentSN > other.strMatchContentSN:
                        return 1
                if self.strIncidentFilePath is None or other.strIncidentFilePath is None:
                    if self.strIncidentFilePath != other.strIncidentFilePath:
                        return (-1 if self.strIncidentFilePath is None else 1)
                else:
                    if self.strIncidentFilePath < other.strIncidentFilePath:
                        return -1
                    elif self.strIncidentFilePath > other.strIncidentFilePath:
                        return 1
                if self.strIncidentFileType is None or other.strIncidentFileType is None:
                    if self.strIncidentFileType != other.strIncidentFileType:
                        return (-1 if self.strIncidentFileType is None else 1)
                else:
                    if self.strIncidentFileType < other.strIncidentFileType:
                        return -1
                    elif self.strIncidentFileType > other.strIncidentFileType:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ScanEngineStub._t_ResultOfMetaRule)

        __repr__ = __str__

    _M_ScanEngineStub._t_ResultOfMetaRule = IcePy.defineStruct('::ScanEngineStub::ResultOfMetaRule', ResultOfMetaRule, (), (
        ('strInnerFile', (), IcePy._t_string),
        ('strDisplayFileName', (), IcePy._t_string),
        ('strMatchRuleSN', (), IcePy._t_string),
        ('strMatchRuleName', (), IcePy._t_string),
        ('uiMatchCount', (), IcePy._t_int),
        ('strMatchContentSN', (), IcePy._t_string),
        ('strIncidentFilePath', (), IcePy._t_string),
        ('strIncidentFileType', (), IcePy._t_string)
    ))

    _M_ScanEngineStub.ResultOfMetaRule = ResultOfMetaRule
    del ResultOfMetaRule

if '_t_ResultOfMetaRuleVector' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub._t_ResultOfMetaRuleVector = IcePy.defineSequence('::ScanEngineStub::ResultOfMetaRuleVector', (), _M_ScanEngineStub._t_ResultOfMetaRule)

if 'ResultOfDocRule' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.ResultOfDocRule = Ice.createTempClass()
    class ResultOfDocRule(object):
        def __init__(self, uiMetaMatchCount=0, uiSeverity=0, uiMatchRuleGrpID=0, strMatchRuleGrpSN='', strMatchRuleGrpName='', vecMetaResults=None):
            self.uiMetaMatchCount = uiMetaMatchCount
            self.uiSeverity = uiSeverity
            self.uiMatchRuleGrpID = uiMatchRuleGrpID
            self.strMatchRuleGrpSN = strMatchRuleGrpSN
            self.strMatchRuleGrpName = strMatchRuleGrpName
            self.vecMetaResults = vecMetaResults

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.uiMetaMatchCount)
            _h = 5 * _h + Ice.getHash(self.uiSeverity)
            _h = 5 * _h + Ice.getHash(self.uiMatchRuleGrpID)
            _h = 5 * _h + Ice.getHash(self.strMatchRuleGrpSN)
            _h = 5 * _h + Ice.getHash(self.strMatchRuleGrpName)
            if self.vecMetaResults:
                for _i0 in self.vecMetaResults:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ScanEngineStub.ResultOfDocRule):
                return NotImplemented
            else:
                if self.uiMetaMatchCount is None or other.uiMetaMatchCount is None:
                    if self.uiMetaMatchCount != other.uiMetaMatchCount:
                        return (-1 if self.uiMetaMatchCount is None else 1)
                else:
                    if self.uiMetaMatchCount < other.uiMetaMatchCount:
                        return -1
                    elif self.uiMetaMatchCount > other.uiMetaMatchCount:
                        return 1
                if self.uiSeverity is None or other.uiSeverity is None:
                    if self.uiSeverity != other.uiSeverity:
                        return (-1 if self.uiSeverity is None else 1)
                else:
                    if self.uiSeverity < other.uiSeverity:
                        return -1
                    elif self.uiSeverity > other.uiSeverity:
                        return 1
                if self.uiMatchRuleGrpID is None or other.uiMatchRuleGrpID is None:
                    if self.uiMatchRuleGrpID != other.uiMatchRuleGrpID:
                        return (-1 if self.uiMatchRuleGrpID is None else 1)
                else:
                    if self.uiMatchRuleGrpID < other.uiMatchRuleGrpID:
                        return -1
                    elif self.uiMatchRuleGrpID > other.uiMatchRuleGrpID:
                        return 1
                if self.strMatchRuleGrpSN is None or other.strMatchRuleGrpSN is None:
                    if self.strMatchRuleGrpSN != other.strMatchRuleGrpSN:
                        return (-1 if self.strMatchRuleGrpSN is None else 1)
                else:
                    if self.strMatchRuleGrpSN < other.strMatchRuleGrpSN:
                        return -1
                    elif self.strMatchRuleGrpSN > other.strMatchRuleGrpSN:
                        return 1
                if self.strMatchRuleGrpName is None or other.strMatchRuleGrpName is None:
                    if self.strMatchRuleGrpName != other.strMatchRuleGrpName:
                        return (-1 if self.strMatchRuleGrpName is None else 1)
                else:
                    if self.strMatchRuleGrpName < other.strMatchRuleGrpName:
                        return -1
                    elif self.strMatchRuleGrpName > other.strMatchRuleGrpName:
                        return 1
                if self.vecMetaResults is None or other.vecMetaResults is None:
                    if self.vecMetaResults != other.vecMetaResults:
                        return (-1 if self.vecMetaResults is None else 1)
                else:
                    if self.vecMetaResults < other.vecMetaResults:
                        return -1
                    elif self.vecMetaResults > other.vecMetaResults:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ScanEngineStub._t_ResultOfDocRule)

        __repr__ = __str__

    _M_ScanEngineStub._t_ResultOfDocRule = IcePy.defineStruct('::ScanEngineStub::ResultOfDocRule', ResultOfDocRule, (), (
        ('uiMetaMatchCount', (), IcePy._t_int),
        ('uiSeverity', (), IcePy._t_int),
        ('uiMatchRuleGrpID', (), IcePy._t_int),
        ('strMatchRuleGrpSN', (), IcePy._t_string),
        ('strMatchRuleGrpName', (), IcePy._t_string),
        ('vecMetaResults', (), _M_ScanEngineStub._t_ResultOfMetaRuleVector)
    ))

    _M_ScanEngineStub.ResultOfDocRule = ResultOfDocRule
    del ResultOfDocRule

if '_t_ResultOfDocRuleVector' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub._t_ResultOfDocRuleVector = IcePy.defineSequence('::ScanEngineStub::ResultOfDocRuleVector', (), _M_ScanEngineStub._t_ResultOfDocRule)

if 'ResultOfIncident' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.ResultOfIncident = Ice.createTempClass()
    class ResultOfIncident(object):
        def __init__(self, iFlags=0, strTaskID='', strMD5='', strOrigFile='', iFileTypeCode=0, llScanTime=0, uiDocMatchCount=0, uiSeverity=0, uiPriority=0, strProfileSN='', strProfileName='', uiPolicyGroupID=0, strPolicyGroupName='', uiPolicyID=0, strPolicySN='', strPolicyName='', strVersion='', strActionGroup='', vecDocResults=None):
            self.iFlags = iFlags
            self.strTaskID = strTaskID
            self.strMD5 = strMD5
            self.strOrigFile = strOrigFile
            self.iFileTypeCode = iFileTypeCode
            self.llScanTime = llScanTime
            self.uiDocMatchCount = uiDocMatchCount
            self.uiSeverity = uiSeverity
            self.uiPriority = uiPriority
            self.strProfileSN = strProfileSN
            self.strProfileName = strProfileName
            self.uiPolicyGroupID = uiPolicyGroupID
            self.strPolicyGroupName = strPolicyGroupName
            self.uiPolicyID = uiPolicyID
            self.strPolicySN = strPolicySN
            self.strPolicyName = strPolicyName
            self.strVersion = strVersion
            self.strActionGroup = strActionGroup
            self.vecDocResults = vecDocResults

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.iFlags)
            _h = 5 * _h + Ice.getHash(self.strTaskID)
            _h = 5 * _h + Ice.getHash(self.strMD5)
            _h = 5 * _h + Ice.getHash(self.strOrigFile)
            _h = 5 * _h + Ice.getHash(self.iFileTypeCode)
            _h = 5 * _h + Ice.getHash(self.llScanTime)
            _h = 5 * _h + Ice.getHash(self.uiDocMatchCount)
            _h = 5 * _h + Ice.getHash(self.uiSeverity)
            _h = 5 * _h + Ice.getHash(self.uiPriority)
            _h = 5 * _h + Ice.getHash(self.strProfileSN)
            _h = 5 * _h + Ice.getHash(self.strProfileName)
            _h = 5 * _h + Ice.getHash(self.uiPolicyGroupID)
            _h = 5 * _h + Ice.getHash(self.strPolicyGroupName)
            _h = 5 * _h + Ice.getHash(self.uiPolicyID)
            _h = 5 * _h + Ice.getHash(self.strPolicySN)
            _h = 5 * _h + Ice.getHash(self.strPolicyName)
            _h = 5 * _h + Ice.getHash(self.strVersion)
            _h = 5 * _h + Ice.getHash(self.strActionGroup)
            if self.vecDocResults:
                for _i0 in self.vecDocResults:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ScanEngineStub.ResultOfIncident):
                return NotImplemented
            else:
                if self.iFlags is None or other.iFlags is None:
                    if self.iFlags != other.iFlags:
                        return (-1 if self.iFlags is None else 1)
                else:
                    if self.iFlags < other.iFlags:
                        return -1
                    elif self.iFlags > other.iFlags:
                        return 1
                if self.strTaskID is None or other.strTaskID is None:
                    if self.strTaskID != other.strTaskID:
                        return (-1 if self.strTaskID is None else 1)
                else:
                    if self.strTaskID < other.strTaskID:
                        return -1
                    elif self.strTaskID > other.strTaskID:
                        return 1
                if self.strMD5 is None or other.strMD5 is None:
                    if self.strMD5 != other.strMD5:
                        return (-1 if self.strMD5 is None else 1)
                else:
                    if self.strMD5 < other.strMD5:
                        return -1
                    elif self.strMD5 > other.strMD5:
                        return 1
                if self.strOrigFile is None or other.strOrigFile is None:
                    if self.strOrigFile != other.strOrigFile:
                        return (-1 if self.strOrigFile is None else 1)
                else:
                    if self.strOrigFile < other.strOrigFile:
                        return -1
                    elif self.strOrigFile > other.strOrigFile:
                        return 1
                if self.iFileTypeCode is None or other.iFileTypeCode is None:
                    if self.iFileTypeCode != other.iFileTypeCode:
                        return (-1 if self.iFileTypeCode is None else 1)
                else:
                    if self.iFileTypeCode < other.iFileTypeCode:
                        return -1
                    elif self.iFileTypeCode > other.iFileTypeCode:
                        return 1
                if self.llScanTime is None or other.llScanTime is None:
                    if self.llScanTime != other.llScanTime:
                        return (-1 if self.llScanTime is None else 1)
                else:
                    if self.llScanTime < other.llScanTime:
                        return -1
                    elif self.llScanTime > other.llScanTime:
                        return 1
                if self.uiDocMatchCount is None or other.uiDocMatchCount is None:
                    if self.uiDocMatchCount != other.uiDocMatchCount:
                        return (-1 if self.uiDocMatchCount is None else 1)
                else:
                    if self.uiDocMatchCount < other.uiDocMatchCount:
                        return -1
                    elif self.uiDocMatchCount > other.uiDocMatchCount:
                        return 1
                if self.uiSeverity is None or other.uiSeverity is None:
                    if self.uiSeverity != other.uiSeverity:
                        return (-1 if self.uiSeverity is None else 1)
                else:
                    if self.uiSeverity < other.uiSeverity:
                        return -1
                    elif self.uiSeverity > other.uiSeverity:
                        return 1
                if self.uiPriority is None or other.uiPriority is None:
                    if self.uiPriority != other.uiPriority:
                        return (-1 if self.uiPriority is None else 1)
                else:
                    if self.uiPriority < other.uiPriority:
                        return -1
                    elif self.uiPriority > other.uiPriority:
                        return 1
                if self.strProfileSN is None or other.strProfileSN is None:
                    if self.strProfileSN != other.strProfileSN:
                        return (-1 if self.strProfileSN is None else 1)
                else:
                    if self.strProfileSN < other.strProfileSN:
                        return -1
                    elif self.strProfileSN > other.strProfileSN:
                        return 1
                if self.strProfileName is None or other.strProfileName is None:
                    if self.strProfileName != other.strProfileName:
                        return (-1 if self.strProfileName is None else 1)
                else:
                    if self.strProfileName < other.strProfileName:
                        return -1
                    elif self.strProfileName > other.strProfileName:
                        return 1
                if self.uiPolicyGroupID is None or other.uiPolicyGroupID is None:
                    if self.uiPolicyGroupID != other.uiPolicyGroupID:
                        return (-1 if self.uiPolicyGroupID is None else 1)
                else:
                    if self.uiPolicyGroupID < other.uiPolicyGroupID:
                        return -1
                    elif self.uiPolicyGroupID > other.uiPolicyGroupID:
                        return 1
                if self.strPolicyGroupName is None or other.strPolicyGroupName is None:
                    if self.strPolicyGroupName != other.strPolicyGroupName:
                        return (-1 if self.strPolicyGroupName is None else 1)
                else:
                    if self.strPolicyGroupName < other.strPolicyGroupName:
                        return -1
                    elif self.strPolicyGroupName > other.strPolicyGroupName:
                        return 1
                if self.uiPolicyID is None or other.uiPolicyID is None:
                    if self.uiPolicyID != other.uiPolicyID:
                        return (-1 if self.uiPolicyID is None else 1)
                else:
                    if self.uiPolicyID < other.uiPolicyID:
                        return -1
                    elif self.uiPolicyID > other.uiPolicyID:
                        return 1
                if self.strPolicySN is None or other.strPolicySN is None:
                    if self.strPolicySN != other.strPolicySN:
                        return (-1 if self.strPolicySN is None else 1)
                else:
                    if self.strPolicySN < other.strPolicySN:
                        return -1
                    elif self.strPolicySN > other.strPolicySN:
                        return 1
                if self.strPolicyName is None or other.strPolicyName is None:
                    if self.strPolicyName != other.strPolicyName:
                        return (-1 if self.strPolicyName is None else 1)
                else:
                    if self.strPolicyName < other.strPolicyName:
                        return -1
                    elif self.strPolicyName > other.strPolicyName:
                        return 1
                if self.strVersion is None or other.strVersion is None:
                    if self.strVersion != other.strVersion:
                        return (-1 if self.strVersion is None else 1)
                else:
                    if self.strVersion < other.strVersion:
                        return -1
                    elif self.strVersion > other.strVersion:
                        return 1
                if self.strActionGroup is None or other.strActionGroup is None:
                    if self.strActionGroup != other.strActionGroup:
                        return (-1 if self.strActionGroup is None else 1)
                else:
                    if self.strActionGroup < other.strActionGroup:
                        return -1
                    elif self.strActionGroup > other.strActionGroup:
                        return 1
                if self.vecDocResults is None or other.vecDocResults is None:
                    if self.vecDocResults != other.vecDocResults:
                        return (-1 if self.vecDocResults is None else 1)
                else:
                    if self.vecDocResults < other.vecDocResults:
                        return -1
                    elif self.vecDocResults > other.vecDocResults:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ScanEngineStub._t_ResultOfIncident)

        __repr__ = __str__

    _M_ScanEngineStub._t_ResultOfIncident = IcePy.defineStruct('::ScanEngineStub::ResultOfIncident', ResultOfIncident, (), (
        ('iFlags', (), IcePy._t_int),
        ('strTaskID', (), IcePy._t_string),
        ('strMD5', (), IcePy._t_string),
        ('strOrigFile', (), IcePy._t_string),
        ('iFileTypeCode', (), IcePy._t_int),
        ('llScanTime', (), IcePy._t_long),
        ('uiDocMatchCount', (), IcePy._t_int),
        ('uiSeverity', (), IcePy._t_int),
        ('uiPriority', (), IcePy._t_int),
        ('strProfileSN', (), IcePy._t_string),
        ('strProfileName', (), IcePy._t_string),
        ('uiPolicyGroupID', (), IcePy._t_int),
        ('strPolicyGroupName', (), IcePy._t_string),
        ('uiPolicyID', (), IcePy._t_int),
        ('strPolicySN', (), IcePy._t_string),
        ('strPolicyName', (), IcePy._t_string),
        ('strVersion', (), IcePy._t_string),
        ('strActionGroup', (), IcePy._t_string),
        ('vecDocResults', (), _M_ScanEngineStub._t_ResultOfDocRuleVector)
    ))

    _M_ScanEngineStub.ResultOfIncident = ResultOfIncident
    del ResultOfIncident

if 'ResultOfMatchContent' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.ResultOfMatchContent = Ice.createTempClass()
    class ResultOfMatchContent(object):
        def __init__(self, strMatchContentSN='', strMatchContent=''):
            self.strMatchContentSN = strMatchContentSN
            self.strMatchContent = strMatchContent

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.strMatchContentSN)
            _h = 5 * _h + Ice.getHash(self.strMatchContent)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_ScanEngineStub.ResultOfMatchContent):
                return NotImplemented
            else:
                if self.strMatchContentSN is None or other.strMatchContentSN is None:
                    if self.strMatchContentSN != other.strMatchContentSN:
                        return (-1 if self.strMatchContentSN is None else 1)
                else:
                    if self.strMatchContentSN < other.strMatchContentSN:
                        return -1
                    elif self.strMatchContentSN > other.strMatchContentSN:
                        return 1
                if self.strMatchContent is None or other.strMatchContent is None:
                    if self.strMatchContent != other.strMatchContent:
                        return (-1 if self.strMatchContent is None else 1)
                else:
                    if self.strMatchContent < other.strMatchContent:
                        return -1
                    elif self.strMatchContent > other.strMatchContent:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_ScanEngineStub._t_ResultOfMatchContent)

        __repr__ = __str__

    _M_ScanEngineStub._t_ResultOfMatchContent = IcePy.defineStruct('::ScanEngineStub::ResultOfMatchContent', ResultOfMatchContent, (), (
        ('strMatchContentSN', (), IcePy._t_string),
        ('strMatchContent', (), IcePy._t_string)
    ))

    _M_ScanEngineStub.ResultOfMatchContent = ResultOfMatchContent
    del ResultOfMatchContent

if '_t_ExceptOfTaskVector' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub._t_ExceptOfTaskVector = IcePy.defineSequence('::ScanEngineStub::ExceptOfTaskVector', (), _M_ScanEngineStub._t_ExceptOfTask)

if '_t_IntVector' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub._t_IntVector = IcePy.defineSequence('::ScanEngineStub::IntVector', (), IcePy._t_int)

if '_t_StringVector' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub._t_StringVector = IcePy.defineSequence('::ScanEngineStub::StringVector', (), IcePy._t_string)

if '_t_StringMap' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub._t_StringMap = IcePy.defineDictionary('::ScanEngineStub::StringMap', (), IcePy._t_string, IcePy._t_string)

_M_ScanEngineStub._t_IClientStub = IcePy.defineValue('::ScanEngineStub::IClientStub', Ice.Value, -1, (), False, True, None, ())

if 'IClientStubPrx' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.IClientStubPrx = Ice.createTempClass()
    class IClientStubPrx(Ice.ObjectPrx):

        def AsyncRegistered(self, iRet, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncRegistered.invoke(self, ((iRet, ), context))

        def AsyncRegisteredAsync(self, iRet, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncRegistered.invokeAsync(self, ((iRet, ), context))

        def begin_AsyncRegistered(self, iRet, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncRegistered.begin(self, ((iRet, ), _response, _ex, _sent, context))

        def end_AsyncRegistered(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncRegistered.end(self, _r)

        def AsyncScanStarted(self, strTaskID, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanStarted.invoke(self, ((strTaskID, ), context))

        def AsyncScanStartedAsync(self, strTaskID, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanStarted.invokeAsync(self, ((strTaskID, ), context))

        def begin_AsyncScanStarted(self, strTaskID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanStarted.begin(self, ((strTaskID, ), _response, _ex, _sent, context))

        def end_AsyncScanStarted(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanStarted.end(self, _r)

        def AsyncRuleContentReport(self, stContentResult, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncRuleContentReport.invoke(self, ((stContentResult, ), context))

        def AsyncRuleContentReportAsync(self, stContentResult, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncRuleContentReport.invokeAsync(self, ((stContentResult, ), context))

        def begin_AsyncRuleContentReport(self, stContentResult, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncRuleContentReport.begin(self, ((stContentResult, ), _response, _ex, _sent, context))

        def end_AsyncRuleContentReport(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncRuleContentReport.end(self, _r)

        def AsyncScanIncidentReport(self, strTaskID, stIncidentResult, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanIncidentReport.invoke(self, ((strTaskID, stIncidentResult), context))

        def AsyncScanIncidentReportAsync(self, strTaskID, stIncidentResult, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanIncidentReport.invokeAsync(self, ((strTaskID, stIncidentResult), context))

        def begin_AsyncScanIncidentReport(self, strTaskID, stIncidentResult, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanIncidentReport.begin(self, ((strTaskID, stIncidentResult), _response, _ex, _sent, context))

        def end_AsyncScanIncidentReport(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanIncidentReport.end(self, _r)

        def AsyncScanCompleted(self, strTaskID, stScanResult, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanCompleted.invoke(self, ((strTaskID, stScanResult), context))

        def AsyncScanCompletedAsync(self, strTaskID, stScanResult, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanCompleted.invokeAsync(self, ((strTaskID, stScanResult), context))

        def begin_AsyncScanCompleted(self, strTaskID, stScanResult, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanCompleted.begin(self, ((strTaskID, stScanResult), _response, _ex, _sent, context))

        def end_AsyncScanCompleted(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanCompleted.end(self, _r)

        def AsyncScanPriorityCompleted(self, strTaskID, priority, incidentCnt, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanPriorityCompleted.invoke(self, ((strTaskID, priority, incidentCnt), context))

        def AsyncScanPriorityCompletedAsync(self, strTaskID, priority, incidentCnt, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanPriorityCompleted.invokeAsync(self, ((strTaskID, priority, incidentCnt), context))

        def begin_AsyncScanPriorityCompleted(self, strTaskID, priority, incidentCnt, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanPriorityCompleted.begin(self, ((strTaskID, priority, incidentCnt), _response, _ex, _sent, context))

        def end_AsyncScanPriorityCompleted(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanPriorityCompleted.end(self, _r)

        def AsyncScanCancelled(self, strTaskID, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanCancelled.invoke(self, ((strTaskID, ), context))

        def AsyncScanCancelledAsync(self, strTaskID, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanCancelled.invokeAsync(self, ((strTaskID, ), context))

        def begin_AsyncScanCancelled(self, strTaskID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanCancelled.begin(self, ((strTaskID, ), _response, _ex, _sent, context))

        def end_AsyncScanCancelled(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanCancelled.end(self, _r)

        def AsyncUpdatePolicyed(self, iRet, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdatePolicyed.invoke(self, ((iRet, ), context))

        def AsyncUpdatePolicyedAsync(self, iRet, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdatePolicyed.invokeAsync(self, ((iRet, ), context))

        def begin_AsyncUpdatePolicyed(self, iRet, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdatePolicyed.begin(self, ((iRet, ), _response, _ex, _sent, context))

        def end_AsyncUpdatePolicyed(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdatePolicyed.end(self, _r)

        def AsyncUpdateFileTypeCompleted(self, iRet, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdateFileTypeCompleted.invoke(self, ((iRet, ), context))

        def AsyncUpdateFileTypeCompletedAsync(self, iRet, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdateFileTypeCompleted.invokeAsync(self, ((iRet, ), context))

        def begin_AsyncUpdateFileTypeCompleted(self, iRet, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdateFileTypeCompleted.begin(self, ((iRet, ), _response, _ex, _sent, context))

        def end_AsyncUpdateFileTypeCompleted(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdateFileTypeCompleted.end(self, _r)

        def AsyncUpdateResourced(self, iRet, strResourceType, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdateResourced.invoke(self, ((iRet, strResourceType), context))

        def AsyncUpdateResourcedAsync(self, iRet, strResourceType, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdateResourced.invokeAsync(self, ((iRet, strResourceType), context))

        def begin_AsyncUpdateResourced(self, iRet, strResourceType, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdateResourced.begin(self, ((iRet, strResourceType), _response, _ex, _sent, context))

        def end_AsyncUpdateResourced(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncUpdateResourced.end(self, _r)

        def AsyncSetScanTimeOuted(self, iRet, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncSetScanTimeOuted.invoke(self, ((iRet, ), context))

        def AsyncSetScanTimeOutedAsync(self, iRet, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncSetScanTimeOuted.invokeAsync(self, ((iRet, ), context))

        def begin_AsyncSetScanTimeOuted(self, iRet, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncSetScanTimeOuted.begin(self, ((iRet, ), _response, _ex, _sent, context))

        def end_AsyncSetScanTimeOuted(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncSetScanTimeOuted.end(self, _r)

        def AsyncScanException(self, vecTask, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanException.invoke(self, ((vecTask, ), context))

        def AsyncScanExceptionAsync(self, vecTask, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanException.invokeAsync(self, ((vecTask, ), context))

        def begin_AsyncScanException(self, vecTask, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanException.begin(self, ((vecTask, ), _response, _ex, _sent, context))

        def end_AsyncScanException(self, _r):
            return _M_ScanEngineStub.IClientStub._op_AsyncScanException.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ScanEngineStub.IClientStubPrx.ice_checkedCast(proxy, '::ScanEngineStub::IClientStub', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ScanEngineStub.IClientStubPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ScanEngineStub::IClientStub'
    _M_ScanEngineStub._t_IClientStubPrx = IcePy.defineProxy('::ScanEngineStub::IClientStub', IClientStubPrx)

    _M_ScanEngineStub.IClientStubPrx = IClientStubPrx
    del IClientStubPrx

    _M_ScanEngineStub.IClientStub = Ice.createTempClass()
    class IClientStub(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ScanEngineStub::IClientStub')

        def ice_id(self, current=None):
            return '::ScanEngineStub::IClientStub'

        @staticmethod
        def ice_staticId():
            return '::ScanEngineStub::IClientStub'

        def AsyncRegistered(self, iRet, current=None):
            raise NotImplementedError("servant method 'AsyncRegistered' not implemented")

        def AsyncScanStarted(self, strTaskID, current=None):
            raise NotImplementedError("servant method 'AsyncScanStarted' not implemented")

        def AsyncRuleContentReport(self, stContentResult, current=None):
            raise NotImplementedError("servant method 'AsyncRuleContentReport' not implemented")

        def AsyncScanIncidentReport(self, strTaskID, stIncidentResult, current=None):
            raise NotImplementedError("servant method 'AsyncScanIncidentReport' not implemented")

        def AsyncScanCompleted(self, strTaskID, stScanResult, current=None):
            raise NotImplementedError("servant method 'AsyncScanCompleted' not implemented")

        def AsyncScanPriorityCompleted(self, strTaskID, priority, incidentCnt, current=None):
            raise NotImplementedError("servant method 'AsyncScanPriorityCompleted' not implemented")

        def AsyncScanCancelled(self, strTaskID, current=None):
            raise NotImplementedError("servant method 'AsyncScanCancelled' not implemented")

        def AsyncUpdatePolicyed(self, iRet, current=None):
            raise NotImplementedError("servant method 'AsyncUpdatePolicyed' not implemented")

        def AsyncUpdateFileTypeCompleted(self, iRet, current=None):
            raise NotImplementedError("servant method 'AsyncUpdateFileTypeCompleted' not implemented")

        def AsyncUpdateResourced(self, iRet, strResourceType, current=None):
            raise NotImplementedError("servant method 'AsyncUpdateResourced' not implemented")

        def AsyncSetScanTimeOuted(self, iRet, current=None):
            raise NotImplementedError("servant method 'AsyncSetScanTimeOuted' not implemented")

        def AsyncScanException(self, vecTask, current=None):
            raise NotImplementedError("servant method 'AsyncScanException' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ScanEngineStub._t_IClientStubDisp)

        __repr__ = __str__

    _M_ScanEngineStub._t_IClientStubDisp = IcePy.defineClass('::ScanEngineStub::IClientStub', IClientStub, (), None, ())
    IClientStub._ice_type = _M_ScanEngineStub._t_IClientStubDisp

    IClientStub._op_AsyncRegistered = IcePy.Operation('AsyncRegistered', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncScanStarted = IcePy.Operation('AsyncScanStarted', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncRuleContentReport = IcePy.Operation('AsyncRuleContentReport', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_ScanEngineStub._t_ResultOfMatchContent, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncScanIncidentReport = IcePy.Operation('AsyncScanIncidentReport', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_ScanEngineStub._t_ResultOfIncident, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncScanCompleted = IcePy.Operation('AsyncScanCompleted', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_ScanEngineStub._t_ResultOfScan, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncScanPriorityCompleted = IcePy.Operation('AsyncScanPriorityCompleted', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncScanCancelled = IcePy.Operation('AsyncScanCancelled', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncUpdatePolicyed = IcePy.Operation('AsyncUpdatePolicyed', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncUpdateFileTypeCompleted = IcePy.Operation('AsyncUpdateFileTypeCompleted', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncUpdateResourced = IcePy.Operation('AsyncUpdateResourced', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncSetScanTimeOuted = IcePy.Operation('AsyncSetScanTimeOuted', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IClientStub._op_AsyncScanException = IcePy.Operation('AsyncScanException', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_ScanEngineStub._t_ExceptOfTaskVector, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_ScanEngineStub.IClientStub = IClientStub
    del IClientStub

_M_ScanEngineStub._t_IServerStub = IcePy.defineValue('::ScanEngineStub::IServerStub', Ice.Value, -1, (), False, True, None, ())

if 'IServerStubPrx' not in _M_ScanEngineStub.__dict__:
    _M_ScanEngineStub.IServerStubPrx = Ice.createTempClass()
    class IServerStubPrx(Ice.ObjectPrx):

        def AddClient(self, ident, context=None):
            return _M_ScanEngineStub.IServerStub._op_AddClient.invoke(self, ((ident, ), context))

        def AddClientAsync(self, ident, context=None):
            return _M_ScanEngineStub.IServerStub._op_AddClient.invokeAsync(self, ((ident, ), context))

        def begin_AddClient(self, ident, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AddClient.begin(self, ((ident, ), _response, _ex, _sent, context))

        def end_AddClient(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AddClient.end(self, _r)

        def CheckClient(self, ident, context=None):
            return _M_ScanEngineStub.IServerStub._op_CheckClient.invoke(self, ((ident, ), context))

        def CheckClientAsync(self, ident, context=None):
            return _M_ScanEngineStub.IServerStub._op_CheckClient.invokeAsync(self, ((ident, ), context))

        def begin_CheckClient(self, ident, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_CheckClient.begin(self, ((ident, ), _response, _ex, _sent, context))

        def end_CheckClient(self, _r):
            return _M_ScanEngineStub.IServerStub._op_CheckClient.end(self, _r)

        def AsyncRegisterScanEngine(self, strClientID, emHowType, strPolicyFile, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncRegisterScanEngine.invoke(self, ((strClientID, emHowType, strPolicyFile), context))

        def AsyncRegisterScanEngineAsync(self, strClientID, emHowType, strPolicyFile, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncRegisterScanEngine.invokeAsync(self, ((strClientID, emHowType, strPolicyFile), context))

        def begin_AsyncRegisterScanEngine(self, strClientID, emHowType, strPolicyFile, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncRegisterScanEngine.begin(self, ((strClientID, emHowType, strPolicyFile), _response, _ex, _sent, context))

        def end_AsyncRegisterScanEngine(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncRegisterScanEngine.end(self, _r)

        def AsyncStartScan(self, strClientID, strTaskID, strFilePath, mapParams, md5, flags, displayFileName, policyIds, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncStartScan.invoke(self, ((strClientID, strTaskID, strFilePath, mapParams, md5, flags, displayFileName, policyIds), context))

        def AsyncStartScanAsync(self, strClientID, strTaskID, strFilePath, mapParams, md5, flags, displayFileName, policyIds, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncStartScan.invokeAsync(self, ((strClientID, strTaskID, strFilePath, mapParams, md5, flags, displayFileName, policyIds), context))

        def begin_AsyncStartScan(self, strClientID, strTaskID, strFilePath, mapParams, md5, flags, displayFileName, policyIds, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncStartScan.begin(self, ((strClientID, strTaskID, strFilePath, mapParams, md5, flags, displayFileName, policyIds), _response, _ex, _sent, context))

        def end_AsyncStartScan(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncStartScan.end(self, _r)

        def AsyncCancelScan(self, strClientID, strTaskID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncCancelScan.invoke(self, ((strClientID, strTaskID), context))

        def AsyncCancelScanAsync(self, strClientID, strTaskID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncCancelScan.invokeAsync(self, ((strClientID, strTaskID), context))

        def begin_AsyncCancelScan(self, strClientID, strTaskID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncCancelScan.begin(self, ((strClientID, strTaskID), _response, _ex, _sent, context))

        def end_AsyncCancelScan(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncCancelScan.end(self, _r)

        def AsyncUpdatePolicy(self, strClientID, strPolicyFile, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdatePolicy.invoke(self, ((strClientID, strPolicyFile), context))

        def AsyncUpdatePolicyAsync(self, strClientID, strPolicyFile, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdatePolicy.invokeAsync(self, ((strClientID, strPolicyFile), context))

        def begin_AsyncUpdatePolicy(self, strClientID, strPolicyFile, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdatePolicy.begin(self, ((strClientID, strPolicyFile), _response, _ex, _sent, context))

        def end_AsyncUpdatePolicy(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdatePolicy.end(self, _r)

        def AsyncUpdateUserFileType(self, strClientID, strTypeFile, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdateUserFileType.invoke(self, ((strClientID, strTypeFile), context))

        def AsyncUpdateUserFileTypeAsync(self, strClientID, strTypeFile, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdateUserFileType.invokeAsync(self, ((strClientID, strTypeFile), context))

        def begin_AsyncUpdateUserFileType(self, strClientID, strTypeFile, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdateUserFileType.begin(self, ((strClientID, strTypeFile), _response, _ex, _sent, context))

        def end_AsyncUpdateUserFileType(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdateUserFileType.end(self, _r)

        def AsyncUpdateResource(self, strClientID, strResourceType, vecUpdateFilePaths, vecDeleteResIds, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdateResource.invoke(self, ((strClientID, strResourceType, vecUpdateFilePaths, vecDeleteResIds), context))

        def AsyncUpdateResourceAsync(self, strClientID, strResourceType, vecUpdateFilePaths, vecDeleteResIds, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdateResource.invokeAsync(self, ((strClientID, strResourceType, vecUpdateFilePaths, vecDeleteResIds), context))

        def begin_AsyncUpdateResource(self, strClientID, strResourceType, vecUpdateFilePaths, vecDeleteResIds, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdateResource.begin(self, ((strClientID, strResourceType, vecUpdateFilePaths, vecDeleteResIds), _response, _ex, _sent, context))

        def end_AsyncUpdateResource(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncUpdateResource.end(self, _r)

        def AsyncSetScanTimeOut(self, strClientID, scanTimeOut, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncSetScanTimeOut.invoke(self, ((strClientID, scanTimeOut), context))

        def AsyncSetScanTimeOutAsync(self, strClientID, scanTimeOut, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncSetScanTimeOut.invokeAsync(self, ((strClientID, scanTimeOut), context))

        def begin_AsyncSetScanTimeOut(self, strClientID, scanTimeOut, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncSetScanTimeOut.begin(self, ((strClientID, scanTimeOut), _response, _ex, _sent, context))

        def end_AsyncSetScanTimeOut(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncSetScanTimeOut.end(self, _r)

        def AsyncUnregisterScanEngine(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUnregisterScanEngine.invoke(self, ((strClientID, ), context))

        def AsyncUnregisterScanEngineAsync(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUnregisterScanEngine.invokeAsync(self, ((strClientID, ), context))

        def begin_AsyncUnregisterScanEngine(self, strClientID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncUnregisterScanEngine.begin(self, ((strClientID, ), _response, _ex, _sent, context))

        def end_AsyncUnregisterScanEngine(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncUnregisterScanEngine.end(self, _r)

        def AsyncSuspendScan(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncSuspendScan.invoke(self, ((strClientID, ), context))

        def AsyncSuspendScanAsync(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncSuspendScan.invokeAsync(self, ((strClientID, ), context))

        def begin_AsyncSuspendScan(self, strClientID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncSuspendScan.begin(self, ((strClientID, ), _response, _ex, _sent, context))

        def end_AsyncSuspendScan(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncSuspendScan.end(self, _r)

        def AsyncResumeScan(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncResumeScan.invoke(self, ((strClientID, ), context))

        def AsyncResumeScanAsync(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncResumeScan.invokeAsync(self, ((strClientID, ), context))

        def begin_AsyncResumeScan(self, strClientID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncResumeScan.begin(self, ((strClientID, ), _response, _ex, _sent, context))

        def end_AsyncResumeScan(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncResumeScan.end(self, _r)

        def AsyncLetCpuDown(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncLetCpuDown.invoke(self, ((strClientID, ), context))

        def AsyncLetCpuDownAsync(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncLetCpuDown.invokeAsync(self, ((strClientID, ), context))

        def begin_AsyncLetCpuDown(self, strClientID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_AsyncLetCpuDown.begin(self, ((strClientID, ), _response, _ex, _sent, context))

        def end_AsyncLetCpuDown(self, _r):
            return _M_ScanEngineStub.IServerStub._op_AsyncLetCpuDown.end(self, _r)

        def GetVersion(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_GetVersion.invoke(self, ((strClientID, ), context))

        def GetVersionAsync(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_GetVersion.invokeAsync(self, ((strClientID, ), context))

        def begin_GetVersion(self, strClientID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_GetVersion.begin(self, ((strClientID, ), _response, _ex, _sent, context))

        def end_GetVersion(self, _r):
            return _M_ScanEngineStub.IServerStub._op_GetVersion.end(self, _r)

        def SyncLicItemActive(self, strClientID, emObjType, iLicenceValue, context=None):
            return _M_ScanEngineStub.IServerStub._op_SyncLicItemActive.invoke(self, ((strClientID, emObjType, iLicenceValue), context))

        def SyncLicItemActiveAsync(self, strClientID, emObjType, iLicenceValue, context=None):
            return _M_ScanEngineStub.IServerStub._op_SyncLicItemActive.invokeAsync(self, ((strClientID, emObjType, iLicenceValue), context))

        def begin_SyncLicItemActive(self, strClientID, emObjType, iLicenceValue, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_SyncLicItemActive.begin(self, ((strClientID, emObjType, iLicenceValue), _response, _ex, _sent, context))

        def end_SyncLicItemActive(self, _r):
            return _M_ScanEngineStub.IServerStub._op_SyncLicItemActive.end(self, _r)

        def StopScanEngine(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_StopScanEngine.invoke(self, ((strClientID, ), context))

        def StopScanEngineAsync(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_StopScanEngine.invokeAsync(self, ((strClientID, ), context))

        def begin_StopScanEngine(self, strClientID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_StopScanEngine.begin(self, ((strClientID, ), _response, _ex, _sent, context))

        def end_StopScanEngine(self, _r):
            return _M_ScanEngineStub.IServerStub._op_StopScanEngine.end(self, _r)

        def TerminateScanEngine(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_TerminateScanEngine.invoke(self, ((strClientID, ), context))

        def TerminateScanEngineAsync(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_TerminateScanEngine.invokeAsync(self, ((strClientID, ), context))

        def begin_TerminateScanEngine(self, strClientID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_TerminateScanEngine.begin(self, ((strClientID, ), _response, _ex, _sent, context))

        def end_TerminateScanEngine(self, _r):
            return _M_ScanEngineStub.IServerStub._op_TerminateScanEngine.end(self, _r)

        def GetScanEngineStatistics(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_GetScanEngineStatistics.invoke(self, ((strClientID, ), context))

        def GetScanEngineStatisticsAsync(self, strClientID, context=None):
            return _M_ScanEngineStub.IServerStub._op_GetScanEngineStatistics.invokeAsync(self, ((strClientID, ), context))

        def begin_GetScanEngineStatistics(self, strClientID, _response=None, _ex=None, _sent=None, context=None):
            return _M_ScanEngineStub.IServerStub._op_GetScanEngineStatistics.begin(self, ((strClientID, ), _response, _ex, _sent, context))

        def end_GetScanEngineStatistics(self, _r):
            return _M_ScanEngineStub.IServerStub._op_GetScanEngineStatistics.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ScanEngineStub.IServerStubPrx.ice_checkedCast(proxy, '::ScanEngineStub::IServerStub', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ScanEngineStub.IServerStubPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ScanEngineStub::IServerStub'
    _M_ScanEngineStub._t_IServerStubPrx = IcePy.defineProxy('::ScanEngineStub::IServerStub', IServerStubPrx)

    _M_ScanEngineStub.IServerStubPrx = IServerStubPrx
    del IServerStubPrx

    _M_ScanEngineStub.IServerStub = Ice.createTempClass()
    class IServerStub(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ScanEngineStub::IServerStub')

        def ice_id(self, current=None):
            return '::ScanEngineStub::IServerStub'

        @staticmethod
        def ice_staticId():
            return '::ScanEngineStub::IServerStub'

        def AddClient(self, ident, current=None):
            raise NotImplementedError("servant method 'AddClient' not implemented")

        def CheckClient(self, ident, current=None):
            raise NotImplementedError("servant method 'CheckClient' not implemented")

        def AsyncRegisterScanEngine(self, strClientID, emHowType, strPolicyFile, current=None):
            raise NotImplementedError("servant method 'AsyncRegisterScanEngine' not implemented")

        def AsyncStartScan(self, strClientID, strTaskID, strFilePath, mapParams, md5, flags, displayFileName, policyIds, current=None):
            raise NotImplementedError("servant method 'AsyncStartScan' not implemented")

        def AsyncCancelScan(self, strClientID, strTaskID, current=None):
            raise NotImplementedError("servant method 'AsyncCancelScan' not implemented")

        def AsyncUpdatePolicy(self, strClientID, strPolicyFile, current=None):
            raise NotImplementedError("servant method 'AsyncUpdatePolicy' not implemented")

        def AsyncUpdateUserFileType(self, strClientID, strTypeFile, current=None):
            raise NotImplementedError("servant method 'AsyncUpdateUserFileType' not implemented")

        def AsyncUpdateResource(self, strClientID, strResourceType, vecUpdateFilePaths, vecDeleteResIds, current=None):
            raise NotImplementedError("servant method 'AsyncUpdateResource' not implemented")

        def AsyncSetScanTimeOut(self, strClientID, scanTimeOut, current=None):
            raise NotImplementedError("servant method 'AsyncSetScanTimeOut' not implemented")

        def AsyncUnregisterScanEngine(self, strClientID, current=None):
            raise NotImplementedError("servant method 'AsyncUnregisterScanEngine' not implemented")

        def AsyncSuspendScan(self, strClientID, current=None):
            raise NotImplementedError("servant method 'AsyncSuspendScan' not implemented")

        def AsyncResumeScan(self, strClientID, current=None):
            raise NotImplementedError("servant method 'AsyncResumeScan' not implemented")

        def AsyncLetCpuDown(self, strClientID, current=None):
            raise NotImplementedError("servant method 'AsyncLetCpuDown' not implemented")

        def GetVersion(self, strClientID, current=None):
            raise NotImplementedError("servant method 'GetVersion' not implemented")

        def SyncLicItemActive(self, strClientID, emObjType, iLicenceValue, current=None):
            raise NotImplementedError("servant method 'SyncLicItemActive' not implemented")

        def StopScanEngine(self, strClientID, current=None):
            raise NotImplementedError("servant method 'StopScanEngine' not implemented")

        def TerminateScanEngine(self, strClientID, current=None):
            raise NotImplementedError("servant method 'TerminateScanEngine' not implemented")

        def GetScanEngineStatistics(self, strClientID, current=None):
            raise NotImplementedError("servant method 'GetScanEngineStatistics' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ScanEngineStub._t_IServerStubDisp)

        __repr__ = __str__

    _M_ScanEngineStub._t_IServerStubDisp = IcePy.defineClass('::ScanEngineStub::IServerStub', IServerStub, (), None, ())
    IServerStub._ice_type = _M_ScanEngineStub._t_IServerStubDisp

    IServerStub._op_AddClient = IcePy.Operation('AddClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())
    IServerStub._op_CheckClient = IcePy.Operation('CheckClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_AsyncRegisterScanEngine = IcePy.Operation('AsyncRegisterScanEngine', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_ScanEngineStub._t_ClientHowType, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_AsyncStartScan = IcePy.Operation('AsyncStartScan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_ScanEngineStub._t_StringMap, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), _M_ScanEngineStub._t_IntVector, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_AsyncCancelScan = IcePy.Operation('AsyncCancelScan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_AsyncUpdatePolicy = IcePy.Operation('AsyncUpdatePolicy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_AsyncUpdateUserFileType = IcePy.Operation('AsyncUpdateUserFileType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_AsyncUpdateResource = IcePy.Operation('AsyncUpdateResource', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_ScanEngineStub._t_StringVector, False, 0), ((), _M_ScanEngineStub._t_StringVector, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_AsyncSetScanTimeOut = IcePy.Operation('AsyncSetScanTimeOut', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_AsyncUnregisterScanEngine = IcePy.Operation('AsyncUnregisterScanEngine', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    IServerStub._op_AsyncSuspendScan = IcePy.Operation('AsyncSuspendScan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    IServerStub._op_AsyncResumeScan = IcePy.Operation('AsyncResumeScan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    IServerStub._op_AsyncLetCpuDown = IcePy.Operation('AsyncLetCpuDown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), _M_ScanEngineStub._t_ExceptOfTaskVector, False, 0),), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_GetVersion = IcePy.Operation('GetVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), None, ())
    IServerStub._op_SyncLicItemActive = IcePy.Operation('SyncLicItemActive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_ScanEngineStub._t_eLicActiveObjectType, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    IServerStub._op_StopScanEngine = IcePy.Operation('StopScanEngine', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    IServerStub._op_TerminateScanEngine = IcePy.Operation('TerminateScanEngine', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    IServerStub._op_GetScanEngineStatistics = IcePy.Operation('GetScanEngineStatistics', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (((), IcePy._t_string, False, 0),), None, ())

    _M_ScanEngineStub.IServerStub = IServerStub
    del IServerStub

# End of module ScanEngineStub
